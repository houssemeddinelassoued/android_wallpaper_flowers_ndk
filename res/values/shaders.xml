<?xml version="1.0" encoding="utf-8"?>
<resources>
    <string name="shader_background_vs">
        uniform vec2 uOffset;
        uniform vec2 uAspectRatio;
        attribute vec2 aPosition;
        attribute vec4 aColor;
        varying vec4 vColor;
        varying vec2 vPosition;
        void main() {
            gl_Position = vec4(aPosition, 0.0, 1.0);
            vColor = aColor;
            vPosition = (aPosition + uOffset) * uAspectRatio * 10.0;
        }
    </string>
    <string name="shader_background_fs">
        precision mediump float;
        uniform vec2 uLineWidth;
        varying vec4 vColor;
        varying vec2 vPosition;
        void main() {
            gl_FragColor = vColor;
            vec2 f = fract(vPosition);
            if (f.x &lt; uLineWidth.x || f.y &lt; uLineWidth.y) {
                gl_FragColor.rgb *= 0.98;
            }
        }
    </string>
    <string name="shader_copy_vs">
        attribute vec2 aPosition;
        varying vec2 vTextureCoord;
        void main() {
            gl_Position = vec4(aPosition, 0.0, 1.0);
            vTextureCoord = (gl_Position.xy + 1.0) * 0.5;
        }
    </string>
    <string name="shader_copy_fs">
        precision mediump float;
        uniform sampler2D sTexture;
        varying vec2 vTextureCoord;
        void main() {
            gl_FragColor = texture2D(sTexture, vTextureCoord);
            float brightness = length(vTextureCoord - 0.5) * 1.3;
            gl_FragColor.rgb *= 1.0 - brightness * brightness;
        }
    </string>
    <string name="shader_spline_vs">
        uniform vec2 uControlPts[4];
        uniform vec2 uWidth;
        uniform vec2 uBounds;
        uniform vec2 uAspectRatio;
        attribute vec2 aSplinePos;
        varying vec2 vLineCoord;
        void main() {
            float t = clamp(aSplinePos.x, uBounds.x, uBounds.y);
            vec2 q0 = mix(uControlPts[0], uControlPts[1], t);
            vec2 q1 = mix(uControlPts[1], uControlPts[2], t);
            vec2 q2 = mix(uControlPts[2], uControlPts[3], t);
            vec2 r0 = mix(q0, q1, t);
            vec2 r1 = mix(q1, q2, t);
            
            vec2 pos = mix(r0, r1, t);
            
            vec2 normalVec = r1 - r0;
            normalVec = normalize(vec2(-normalVec.y, normalVec.x));
            
            float width = (uWidth.x + aSplinePos.x * (uWidth.y - uWidth.x)) * 0.5;
            pos += (aSplinePos.y * width) * normalVec * uAspectRatio;
            
            gl_Position = vec4(pos, 0.0, 1.0);
            vLineCoord = aSplinePos;
        }
    </string>
    <string name="shader_spline_fs">
        precision mediump float;
        uniform vec4 uColor;
        varying vec2 vLineCoord;
        void main() {
            gl_FragColor = uColor;
            float a = abs(vLineCoord.y);
            if (a > 0.6) {
                gl_FragColor *= 0.8;
            }
        }
    </string>
    <string name="shader_texture_vs">
        uniform mat2 uRotationM;
        uniform vec2 uAspectRatio;
        uniform vec2 uOffset;
        uniform float uScale;
        attribute vec2 aPosition;
        varying vec2 vTextureCoord;
        void main() {
            vec2 pos = uRotationM * aPosition;
            gl_Position = vec4(pos * uAspectRatio * uScale + uOffset, 0.0, 1.0);
            vTextureCoord = (aPosition.xy + 1.0) * 0.5;
        }
    </string>
    <string name="shader_texture_fs">
        precision mediump float;
        uniform sampler2D sTexture;
        uniform vec4 uColor;
        varying vec2 vTextureCoord;
        void main() {
            gl_FragColor = uColor * texture2D(sTexture, vTextureCoord).r;
        }
    </string>
</resources>